{"version":3,"sources":["redux/actions.js","redux/phonebook-operations.js","redux/phonebook-selectors.js","components/Contacts.js","components/Phonebook.js","components/HomeView.js","redux/auth/auth-actions.js","redux/auth/auth-operations.js","components/RegisterView.js","components/LoginView.js","redux/auth/auth-selectors.js","components/Navigation.js","defaultImg/defaultAvatar.png","components/UserMenu.js","components/AuthNav.js","components/AppBar.js","components/PrivateRoute.js","components/PublicRoute.js","components/App.js","redux/auth/auth-reducer.js","redux/store.js","index.js"],"names":["fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","actions","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","operations","contact","dispatch","axios","post","then","data","catch","error","message","contactId","delete","get","getContacts","state","contacts","getVisibleContacts","createSelector","filter","items","normalizedFilter","toLowerCase","name","includes","Contacts","useSelector","useDispatch","className","map","id","number","type","onClick","deleteContact","Phonebook","useState","setName","setNumber","useEffect","pattern","title","required","onChange","e","target","value","shortid","generate","HomeView","authActions","registerRequest","registerSuccess","registerError","loginRequest","loginSuccess","loginError","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","defaults","baseURL","token","headers","common","Authorization","authOperations","register","credentials","a","response","logIn","logOut","getCurrentUser","getState","persistedToken","authReducer","RegisterView","email","setEmail","password","setPassword","onSubmit","preventDefault","autoComplete","LoginView","handleSubmit","authSelectors","getIsAuthenticated","isAuthenticated","getUserName","user","Navigation","to","exact","UserMenu","avatar","defaultAvatar","onLogout","useCallback","src","alt","width","height","AuthNav","AppBar","isAunthenticated","PrivateRoute","Component","component","redirectTo","routeProps","render","props","PublicRoute","restricted","App","path","initialUserState","createReducer","_","payload","setError","combineReducers","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","authPersistConfig","key","storage","whitelist","store","configureStore","persistReducer","devTools","process","persistorAndStore","persistor","persistStore","ReactDOM","loading","document","getElementById"],"mappings":"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","file":"static/js/main.ee6f26a7.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst fetchContactRequest = createAction('phonebook/FetchContactRequest');\r\nconst fetchContactSuccess = createAction('phonebook/FetchContactSuccess');\r\nconst fetchContactError = createAction('phonebook/FetchContactError');\r\n\r\nconst addContactRequest = createAction('phonebook/AddContactRequest');\r\nconst addContactSuccess = createAction('phonebook/AddContactSuccess');\r\nconst addContactError = createAction('phonebook/AddContactError');\r\n\r\nconst deleteContactRequest = createAction('phonebook/DeleteContactRequest');\r\nconst deleteContactSuccess = createAction('phonebook/DeleteContactSuccess');\r\nconst deleteContactError = createAction('phonebook/DeleteContactError');\r\n\r\nconst changeFilter = createAction('phonebook/FilteredContact');\r\n\r\nexport const actions = {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  changeFilter,\r\n};\r\n","import axios from 'axios';\r\nimport { actions } from './actions';\r\n\r\nconst fetchContacts = () => (dispatch) => {\r\n  dispatch(actions.fetchContactRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(actions.fetchContactSuccess(data)))\r\n    .catch((error) => dispatch(actions.fetchContactError(error.message)));\r\n};\r\n\r\nconst addContact = (contact) => (dispatch) => {\r\n  dispatch(actions.addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(actions.addContactSuccess(data)))\r\n    .catch((error) => dispatch(actions.addContactError(error.message)));\r\n};\r\n\r\nconst deleteContact = (contactId) => (dispatch) => {\r\n  dispatch(actions.deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(actions.deleteContactSuccess(contactId)))\r\n    .catch((error) => dispatch(actions.deleteContactError(error.message)));\r\n};\r\n\r\nconst filterContacts = (contact) => (dispatch) => {\r\n  dispatch(actions.changeFilter());\r\n};\r\n\r\nexport const operations = {\r\n  addContact,\r\n  deleteContact,\r\n  fetchContacts,\r\n  filterContacts,\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getContacts = (state) => state.contacts;\r\n\r\nconst getFilter = (state) => state.filter;\r\n\r\nconst getItems = (state) => state.contacts.items;\r\n\r\nconst getVisibleContacts = createSelector([getFilter, getItems], (filter, items) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n  if (items) {\r\n    return items.filter(({ name }) => name.toLowerCase().includes(normalizedFilter));\r\n  }\r\n});\r\n\r\nexport { getContacts, getVisibleContacts };\r\n","import { React } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { operations } from '../redux/phonebook-operations';\r\nimport { getVisibleContacts } from '../redux/phonebook-selectors';\r\n\r\nconst Contacts = () => {\r\n  const contacts = useSelector(getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n  const deleteContact = (id) => dispatch(operations.deleteContact(id));\r\n\r\n  return (\r\n    <ul className=\"nameList\">\r\n      {contacts &&\r\n        contacts.map(({ id, name, number }) => (\r\n          <li key={id} className=\"item\">\r\n            <p className=\"name\">\r\n              {name}: {number}\r\n            </p>\r\n            <button type=\"button\" onClick={() => deleteContact(id)}>\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Contacts;\r\n","import { useEffect, useState } from 'react';\r\nimport Contacts from './Contacts';\r\nimport shortid from 'shortid';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { actions } from '../redux/actions';\r\nimport { operations } from '../redux/phonebook-operations';\r\nimport { getContacts } from '../redux/phonebook-selectors';\r\n\r\nconst Phonebook = () => {\r\n  const [name, setName] = useState('');\r\n  const handleInputName = (e) => {\r\n    setName({ name: e.target.value });\r\n  };\r\n\r\n  const [number, setNumber] = useState('');\r\n  const handleInputContact = (e) => {\r\n    setNumber({ number: e.target.value });\r\n  };\r\n\r\n  const contacts = useSelector(getContacts);\r\n\r\n  const dispatch = useDispatch();\r\n  useEffect(() => dispatch(operations.fetchContacts()), [dispatch]);\r\n  const addContact = (contact) => dispatch(operations.addContact(contact));\r\n  const handleFilter = (e) => dispatch(actions.changeFilter(e.target.value));\r\n\r\n  return (\r\n    <>\r\n      <form className=\"form\">\r\n        <label className=\"nameLabel\">Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={handleInputName}\r\n          className=\"nameInput\"\r\n        />\r\n        <label className=\"numberLabel\">Number</label>\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={handleInputContact}\r\n          className=\"numberInput\"\r\n        />\r\n        <button\r\n          type=\"button\"\r\n          onClick={() =>\r\n            addContact({\r\n              name: name.name,\r\n              id: shortid.generate(),\r\n              number: number.number,\r\n            })\r\n          }\r\n        >\r\n          Add contact\r\n        </button>\r\n      </form>\r\n      <h2>Contacts: </h2>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        onChange={handleFilter}\r\n        className=\"nameFilter\"\r\n      />\r\n      {contacts && <Contacts contacts={contacts} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Phonebook;\r\n","const HomeView = () => (\r\n  <div>\r\n    <h1>Домашняя страница</h1>\r\n  </div>\r\n);\r\n\r\nexport default HomeView;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst registerRequest = createAction('auth/registerRequest');\r\nconst registerSuccess = createAction('auth/registerSuccess');\r\nconst registerError = createAction('auth/registerError');\r\n\r\nconst loginRequest = createAction('auth/loginRequest');\r\nconst loginSuccess = createAction('auth/loginSuccess');\r\nconst loginError = createAction('auth/loginError');\r\n\r\nconst logoutRequest = createAction('auth/logoutRequest');\r\nconst logoutSuccess = createAction('auth/logoutSuccess');\r\nconst logoutError = createAction('auth/logoutError');\r\n\r\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\r\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\r\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\r\n\r\nconst authActions = {\r\n  registerRequest,\r\n  registerSuccess,\r\n  registerError,\r\n  loginRequest,\r\n  loginSuccess,\r\n  loginError,\r\n  logoutRequest,\r\n  logoutSuccess,\r\n  logoutError,\r\n  getCurrentUserRequest,\r\n  getCurrentUserSuccess,\r\n  getCurrentUserError,\r\n};\r\n\r\nexport default authActions;\r\n","import axios from 'axios';\r\nimport authActions from './auth-actions';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset() {\r\n    axios.defaults.headers.common.Authorization = '';\r\n  },\r\n};\r\n\r\nconst register = (credentials) => async (dispatch) => {\r\n  dispatch(authActions.registerRequest());\r\n\r\n  try {\r\n    const response = await axios.post('users/signup', credentials);\r\n\r\n    token.set(response.data.token);\r\n    dispatch(authActions.registerSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.registerError(error.message));\r\n  }\r\n};\r\n\r\nconst logIn = (credentials) => async (dispatch) => {\r\n  dispatch(authActions.loginRequest());\r\n\r\n  try {\r\n    const response = await axios.post('/users/login', credentials);\r\n\r\n    token.set(response.data.token);\r\n    dispatch(authActions.loginSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.loginError(error.message));\r\n  }\r\n};\r\n\r\nconst logOut = () => async (dispatch) => {\r\n  dispatch(authActions.logoutRequest());\r\n  try {\r\n    await axios.post('/users/logout');\r\n\r\n    token.unset();\r\n    dispatch(authActions.logoutSuccess());\r\n  } catch (error) {\r\n    dispatch(authActions.loginError(error.message));\r\n  }\r\n};\r\n\r\nconst getCurrentUser = () => async (dispatch, getState) => {\r\n  const persistedToken = getState().authReducer.token;\r\n\r\n  if (!persistedToken) {\r\n    return;\r\n  }\r\n\r\n  token.set(persistedToken);\r\n  dispatch(authActions.getCurrentUserRequest());\r\n  try {\r\n    const response = await axios.get('/users/current');\r\n\r\n    dispatch(authActions.getCurrentUserSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.getCurrentUserError(error.message));\r\n  }\r\n};\r\n\r\nconst authOperations = {\r\n  register,\r\n  logIn,\r\n  logOut,\r\n  getCurrentUser,\r\n};\r\n\r\nexport default authOperations;\r\n","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport authOperations from '../redux/auth/auth-operations';\r\n\r\nconst RegisterView = () => {\r\n  const [email, setEmail] = useState('');\r\n  const handleChangeEmail = (e) => {\r\n    setEmail({ email: e.target.value });\r\n  };\r\n\r\n  const [password, setPassword] = useState('');\r\n  const handleChangePassword = (e) => {\r\n    setPassword({ password: e.target.value });\r\n  };\r\n\r\n  const [name, setName] = useState('');\r\n  const handleChangeName = (e) => {\r\n    setName({ name: e.target.value });\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n  const onRegister = (credentials) => dispatch(authOperations.register(credentials));\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    onRegister({ email: email.email, password: password.password, name: name.name });\r\n\r\n    setEmail('');\r\n    setPassword('');\r\n    setName('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Страница регистрации</h1>\r\n      <form onSubmit={handleSubmit} autoComplete=\"off\">\r\n        <label>\r\n          Имя\r\n          <input type=\"text\" name=\"name\" onChange={handleChangeName} />\r\n        </label>\r\n        <label>\r\n          Почта\r\n          <input type=\"email\" name=\"email\" onChange={handleChangeEmail} />\r\n        </label>\r\n        <label>\r\n          Пароль\r\n          <input type=\"password\" name=\"password\" onChange={handleChangePassword} />\r\n        </label>\r\n        <button type=\"submit\">Зарегистрироваться</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegisterView;\r\n","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport authOperations from '../redux/auth/auth-operations';\r\n\r\nconst LoginView = () => {\r\n  const [email, setEmail] = useState('');\r\n  const handleChangeEmail = (e) => {\r\n    setEmail({ email: e.target.value });\r\n  };\r\n\r\n  const [password, setPassword] = useState('');\r\n  const handleChangePassword = (e) => {\r\n    setPassword({ password: e.target.value });\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n  const onLogin = (credentials) => dispatch(authOperations.logIn(credentials));\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    await onLogin({ email: email.email, password: password.password });\r\n\r\n    setEmail('');\r\n    setPassword('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Страница логин</h1>\r\n      <form onSubmit={handleSubmit} autoComplete=\"off\">\r\n        <label>\r\n          Почта\r\n          <input type=\"email\" name=\"email\" onChange={handleChangeEmail} />\r\n        </label>\r\n        <label>\r\n          Пароль\r\n          <input type=\"password\" name=\"password\" onChange={handleChangePassword} />\r\n        </label>\r\n        <button type=\"submit\">Войти</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginView;\r\n","const getIsAuthenticated = (state) => state.authReducer.isAuthenticated;\r\n\r\nconst getUserName = (state) => state.authReducer.user.name;\r\n\r\nconst authSelectors = { getIsAuthenticated, getUserName };\r\n\r\nexport default authSelectors;\r\n","import { useSelector } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport authSelectors from '../redux/auth/auth-selectors';\r\n\r\nconst Navigation = () => {\r\n  const isAuthenticated = useSelector(authSelectors.getIsAuthenticated);\r\n  return (\r\n    <div>\r\n      <NavLink className=\"navLink\" to=\"/\" exact>\r\n        Главная\r\n      </NavLink>\r\n      {isAuthenticated && (\r\n        <NavLink className=\"navLink\" to=\"/contacts\" exact>\r\n          Книга контактов\r\n        </NavLink>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","export default __webpack_public_path__ + \"static/media/defaultAvatar.0c07a2e4.png\";","import { useSelector, useDispatch } from 'react-redux';\r\nimport authSelectors from '../redux/auth/auth-selectors';\r\nimport defaultAvatar from '../defaultImg/defaultAvatar.png';\r\nimport authOperations from '../redux/auth/auth-operations';\r\nimport { useCallback } from 'react';\r\n\r\nconst UserMenu = () => {\r\n  const name = useSelector(authSelectors.getUserName);\r\n  const avatar = defaultAvatar;\r\n  const dispatch = useDispatch();\r\n  const onLogout = useCallback(() => dispatch(authOperations.logOut()), [dispatch]);\r\n\r\n  return (\r\n    <div className=\"userMenuContainer\">\r\n      <img className=\"userMenuAvatar\" src={avatar} alt=\"\" width=\"32\" height=\"32\" />\r\n      <span className=\"userMenuName\">Welcome, {name}</span>\r\n      <button className=\"btnLogout\" type=\"button\" onClick={onLogout}>\r\n        Logout\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserMenu;\r\n","import { NavLink } from 'react-router-dom';\r\n\r\nconst AuthNav = () => (\r\n  <div>\r\n    <NavLink className=\"navLink\" to=\"/register\" exact>\r\n      Регистрация\r\n    </NavLink>\r\n    <NavLink className=\"navLink\" to=\"/login\" exact>\r\n      Вход\r\n    </NavLink>\r\n  </div>\r\n);\r\n\r\nexport default AuthNav;\r\n","import Navigation from './Navigation';\r\nimport UserMenu from './UserMenu';\r\nimport AuthNav from './AuthNav';\r\nimport { useSelector } from 'react-redux';\r\nimport authSelectors from '../redux/auth/auth-selectors';\r\n\r\nconst AppBar = () => {\r\n  const isAunthenticated = useSelector(authSelectors.getIsAuthenticated);\r\n\r\n  return (\r\n    <div className=\"navContainer\">\r\n      <Navigation />\r\n      {isAunthenticated ? <UserMenu /> : <AuthNav />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppBar;\r\n","import { useSelector } from 'react-redux';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport authSelectors from '../redux/auth/auth-selectors';\r\n\r\nconst PrivateRoute = ({ component: Component, redirectTo, ...routeProps }) => {\r\n  const isAuthenticated = useSelector(authSelectors.getIsAuthenticated);\r\n\r\n  return (\r\n    <Route\r\n      {...routeProps}\r\n      render={(props) =>\r\n        isAuthenticated ? <Component {...props} /> : <Redirect to={redirectTo} />\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import { useSelector } from 'react-redux';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport authSelectors from '../redux/auth/auth-selectors';\r\n\r\nconst PublicRoute = ({ component: Component, redirectTo, ...routeProps }) => {\r\n  const isAuthenticated = useSelector(authSelectors.getIsAuthenticated);\r\n\r\n  return (\r\n    <Route\r\n      {...routeProps}\r\n      render={(props) =>\r\n        isAuthenticated && routeProps.restricted ? (\r\n          <Redirect to={redirectTo} />\r\n        ) : (\r\n          <Component {...props} />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PublicRoute;\r\n","import '../style/App.css';\nimport Phonebook from './Phonebook';\nimport { useDispatch } from 'react-redux';\nimport { Route, Switch } from 'react-router-dom';\nimport HomeView from './HomeView';\nimport RegisterView from './RegisterView';\nimport LoginView from './LoginView';\nimport AppBar from './AppBar';\nimport authOperations from '../redux/auth/auth-operations';\nimport PrivateRoute from './PrivateRoute';\nimport PublicRoute from './PublicRoute';\nimport { useEffect } from 'react';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  useEffect(() => dispatch(authOperations.getCurrentUser()), [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <AppBar />\n      <Switch>\n        <Route exact path=\"/\" component={HomeView} />\n        <PublicRoute path=\"/register\" restricted component={RegisterView} redirectTo=\"/contacts\" />\n        <PublicRoute path=\"/login\" restricted component={LoginView} redirectTo=\"/contacts\" />\n        <PrivateRoute path=\"/contacts\" component={Phonebook} redirectTo=\"login\" />\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport authActions from './auth-actions';\r\n\r\nconst initialUserState = { name: null, email: null };\r\n\r\nconst user = createReducer(initialUserState, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.logoutSuccess]: () => initialUserState,\r\n  [authActions.getCurrentUserSuccess]: (_, { payload }) => payload,\r\n});\r\n\r\nconst token = createReducer(null, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.logoutSuccess]: () => null,\r\n});\r\n\r\nconst setError = (_, { payload }) => payload;\r\n\r\nconst error = createReducer(null, {\r\n  [authActions.registerError]: setError,\r\n  [authActions.loginError]: setError,\r\n  [authActions.logoutError]: setError,\r\n  [authActions.getCurrentUserError]: setError,\r\n});\r\nconst isAuthenticated = createReducer(false, {\r\n  [authActions.registerSuccess]: () => true,\r\n  [authActions.loginSuccess]: () => true,\r\n  [authActions.getCurrentUserSuccess]: () => true,\r\n  [authActions.logoutSuccess]: () => false,\r\n  [authActions.registerError]: () => false,\r\n  [authActions.loginError]: () => false,\r\n  [authActions.getCurrentUserError]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  user,\r\n  token,\r\n  error,\r\n  isAuthenticated,\r\n});\r\n","import { configureStore, getDefaultMiddleware, createReducer } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport { actions } from './actions';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport authReducer from './auth/auth-reducer';\r\n\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst contacts = [];\r\n\r\nconst reducer = createReducer(contacts, {\r\n  [actions.fetchContactSuccess]: (_, { payload }) => {\r\n    return { items: payload };\r\n  },\r\n  [actions.addContactSuccess]: ({ items }, { payload }) => {\r\n    return { items: [...items, payload] };\r\n  },\r\n  [actions.deleteContactSuccess]: ({ items }, { payload }) => {\r\n    return { items: [...items.filter((contact) => contact.id !== payload)] };\r\n  },\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    authReducer: persistReducer(authPersistConfig, authReducer),\r\n    contacts: reducer,\r\n    filter,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nconst persistorAndStore = { store, persistor };\r\n\r\nexport default persistorAndStore;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.scss';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport persistorAndStore from './redux/store';\nimport { BrowserRouter } from 'react-router-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <Provider store={persistorAndStore.store}>\n    <PersistGate loading={null} persistor={persistorAndStore.persistor}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}